# https://taskfile.dev

version: "2"

vars:

env:
  INFLUXDB_USERNAME: admin
  INFLUXDB_PASSWORD: axon_secret@@
  INFLUXDB_ORG: axon
  INFLUXDB_BUCKET: metrics
  INFLUXDB_RETENTION: 1w
  INFLUXDB_ADMIN_TOKEN: KMd17_5jXieiL9claBws_RjrLdmwUEuomdtj1sWNQFJ-FPsmF7WhheXtnUunGxOWXuWY2pbhNYsETYBfYtAJUg==

tasks:
  default:
    desc: Executes all the tests then build the binary.
    cmds:
      - task: test
      - task: build

  test:
    desc: Run all the go tests.
    cmds:
      - gofmt -w .
      - go test ./... -short -count=1

  test-verbose:
    desc: Run all the go tests in verbose mode.
    cmds:
      - gofmt -w .
      - go test ./... -v -count=1 

  test-single:
    desc: Run all the go tests in verbose mode from a single test file.
    cmds:
      - gofmt -w .
      - go test ./... -run={{.CASE}} -v -count=1 

  coverage:
    desc: Open test coverage in browser
    cmds:
      - go test -coverprofile=c.out -coverpkg=./... -covermode=atomic ./...
      - go tool cover -html=c.out

  lint-display:
    desc: Call gofmt, go vet and go lint
    cmds:
      - test -z "$(find -path './vendor' -prune -false -o -name '*.go' | xargs gofmt -l -d)"
      - go vet ./...
      - golangci-lint run

  lint:
    desc: Test gofmt, go vet and go lint
    cmds:
      - test -z "$(find -path './vendor' -prune -false -o -name '*.go' | xargs gofmt -l)"
      - go vet ./...
      - golangci-lint run

  build:
    desc: Build the go binary.
    cmds:
      - cd axon-cron && task build
      - cd axon-debug && task build
      - cd axon-file-reader && task build
      - cd axon-function-js && task build
      - cd axon-influxdb-writer && task build

  install:
    desc: Install the binaries to the local machine
    cmds:
      - cd axon-cron && task install
      - cd axon-debug && task install
      - cd axon-file-reader && task install
      - cd axon-function-js && task install
      - cd axon-influxdb-writer && task install

  clean:
    desc: Clean temporary files and folders
    cmds:
      - cd axon-cron && task clean
      - cd axon-debug && task clean
      - cd axon-file-reader && task clean
      - cd axon-function-js && task clean
      - cd axon-influxdb-writer && task clean

  dc-up:
    desc: Start OOM containers
    cmds:
      - docker-compose -f docker-compose-for-test.yml up
      - sleep 10

  dc-upd:
    desc: Start OOM containers in the background
    cmds:
      - docker-compose -f docker-compose-for-test.yml up -d
      - sleep 10
      - task: setup_influxdb
      - task:  dc-logsf

  dc-stop:
    desc: Stop OOM containers
    cmds:
      - docker-compose stop

  dc-logs:
    desc: Get all container logs
    cmds:
      - docker-compose -f docker-compose-for-test.yml logs

  dc-logsf:
    desc: Get all container logs and follow
    cmds:
      - docker-compose -f docker-compose-for-test.yml logs -f

  dc-down:
    desc: Clean up OOM containers
    cmds:
      - docker-compose -f docker-compose-for-test.yml down --volumes --remove-orphans

  setup_influxdb:
    desc: Setup InfluxDB
    cmds:
      - docker exec -it influxdb influx setup --username "${INFLUXDB_USERNAME}" --password "${INFLUXDB_PASSWORD}" --org "${INFLUXDB_ORG}" --bucket "${INFLUXDB_BUCKET}" --retention "${INFLUXDB_RETENTION}" --token "${INFLUXDB_ADMIN_TOKEN}" -f
